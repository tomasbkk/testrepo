name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
    inputs:
      buildType:
        type: choice
        description: 'Build Type'
        default: Release
        options: 
        - Dev
        - Pre-release
        - Release
      overwriteVersion:
        type: boolean
        default: false
        description: 'Overwrite CMakeLists.txt version'
      versionMajor:
        type: string
        description: 'Version major'
        default: '1'
      versionMinor:
        type: string
        description: 'Version minor'
        default: '0'
      versionPatch:
        type: string
        description: 'Version patch'
        default: '0'
      versionRev:
        type: string
        description: 'Version rev'
        default: '0'
        

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  GITHUB_BUILD_NUMBER: ''

jobs:
  build:
    runs-on: windows-2019

    steps:
    
    - name: Install Qt 5.15.0
      uses: jurplel/install-qt-action@v3
      with: 
        version: '5.15.0'
        arch: 'win64_msvc2019_64'
        cache: 'true'
        tools: 'tools_openssl_x64'     
        
    - uses: actions/checkout@v3

    - name: Get timestamp
      id: time
      uses: tomasbkk/get-time-action@test3
      with:
        format: 'YYYY.MM.DD-HH.mm.ss'
        
    - name: Configure CMake
      run: cmake -G "Visual Studio 16 2019" -S ${{ github.workspace }}/TestApp -B ${{github.workspace}}/build

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{ env.BUILD_TYPE }}
     
    - name: Read version information
      id: versionInfo
      uses: juliangruber/read-file-action@v1
      with:
        path: ${{ github.workspace }}\TestApp\version.txt
        
    - name: Trim version
      id: versionTrim
      uses: frabert/replace-string-action@v2.0
      with:
        pattern: '\\s+'
        string: ${{ steps.versionInfo.outputs.content }}
        replace-with: ''
       
    - name: Copy openSSL test
      shell: cmd
      run: |
        echo ${{ env.IQTA_TOOLS }}
        cd ${{ env.IQTA_TOOLS }}\\OpenSSL\Win_x64\bin
        dir
        xcopy "${{ env.IQTA_TOOLS }}\\OpenSSL\Win_x64\bin" "${{ github.workspace }}\build\bin\release" /Q /C /I /Y /S  
      
    - name: Zip build outputs
      uses: thedoctor0/zip-release@main
      with:
        path: '${{ github.workspace }}\build\Release\*'
        filename: 'TestApp${{ steps.versionTrim.outputs.replaced }}.${{ github.run_number }}.zip'
  
    - name: Zip symbols
      uses: thedoctor0/zip-release@main
      with:
        path: '${{ github.workspace }}\build\Release\*'
        filename: 'Symbols${{ steps.versionTrim.outputs.replaced }}.${{ github.run_number }}.zip'
  
    - name: Show files
      shell: cmd
      run: |
        dir
        cd ${{ github.workspace }}
        dir
  
    - name: Create a GitHub release
      id: create_release
      uses: "marvinpinto/action-automatic-releases@v1.2.1"
      if: ${{ github.event.inputs.buildType == 'Pre-release' || github.event.inputs.buildType == 'Release' }}
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        automatic_release_tag: "${{ steps.versionTrim.outputs.replaced }}.${{ github.run_number }}"
        prerelease: ${{ contains(github.event.inputs.buildType, 'Pre-release') }}
        title: Release ${{ steps.tag_version.outputs.new_tag }}
        files: |
          '${{ github.workspace }}\*.zip'

