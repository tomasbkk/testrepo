name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
    inputs:
      buildType:
        type: choice
        description: 'Build Type'
        default: Release
        options: 
        - Dev
        - Pre-release
        - Release
      overwriteVersion:
        type: boolean
        default: false
        description: 'Overwrite CMakeLists.txt version'
      versionMajor:
        type: string
        description: 'Version major'
        default: '1'
      versionMinor:
        type: string
        description: 'Version minor'
        default: '0'
      versionPatch:
        type: string
        description: 'Version patch'
        default: '0'
        

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    runs-on: windows-2019

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      run: cmake -G "Visual Studio 16 2019" -S ${{ github.workspace }}/TestApp -B ${{github.workspace}}/build

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{ env.BUILD_TYPE }}
     
    - name: Read version information
      id: versionInfo
      uses: juliangruber/read-file-action@v1
      with:
        path: ${{ github.workspace }}\TestApp\version.txt
                
    - name: Create a GitHub release
      id: create_release
      if: ${{ github.event.inputs.buildType == 'Pre-release' || github.event.inputs.buildType == 'Release' }}
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.versionInfo.outputs.content }}.${{ github.run_number }}
        release_name: Release ${{ steps.tag_version.outputs.new_tag }}
        body: ${{ steps.tag_version.outputs.changelog }}
        prerelease: ${{ contains(github.event.inputs.buildType, 'Pre-release') }}
          
    - name: Upload Release Asset
      id: uploadrelease-asset
      if: ${{ github.event.inputs.buildType == 'Pre-release' || github.event.inputs.buildType == 'Release' }}
      uses: sekwah41/upload-release-assets@v1.1.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: '${{ github.workspace }}\\build\\Debug\\*'
        asset_name: 'TestApp${{ steps.versionInfo.outputs.content }}.${{ github.run_number }}.zip'
        asset_content_type: application/zip

