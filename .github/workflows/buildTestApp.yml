name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
    inputs:
      buildType:
        type: choice
        description: 'Build type'
        options: 
        - Nightly
        - Release
      versionMajor:
        type: string
        description: 'Version major'
        default: '1'
      versionMinor:
        type: string
        description: 'Version minor'
        default: '0'
      versionPatch:
        type: string
        description: 'Version patch'
        default: '0'
        

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-2019

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -G "Visual Studio 16 2019" -S ${{ github.workspace }}/TestApp -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
     
    - name: Read version information
      if: ${{ env.RUN_ALL_STEPS == 1 }}
      id: versionInfo
      uses: juliangruber/read-file-action@v1
      with:
        path: ${{ github.workspace }}\TestApp\version.txt
        
    - name: Create Tag
      uses: negz/create-tag@v1
      with:
        version: ${{ steps.versionInfo.outputs.content }}
        token: ${{ secrets.GITHUB_TOKEN }}
        
